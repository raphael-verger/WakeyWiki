# import the opencv library
import numpy as np
import cv2
import dlib
from math import hypot
import time

  
# define a video capture object
vid = cv2.VideoCapture(0)
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

# find the midpoint of two point
def midpoint(p1 , p2):
  return (int((p1.x+p2.x)/2), int((p1.y + p2.y)/2))
font = cv2.FONT_HERSHEY_SIMPLEX

# return the ratio of the length of the eye and the width of the eye
def get_blinking_ratio(eye_points, facial_landmarks):
  left_point = (facial_landmarks.part(eye_points[0]).x,facial_landmarks.part(eye_points[0]).y)
  right_point = (facial_landmarks.part(eye_points[3]).x,facial_landmarks.part(eye_points[3]).y)
  center_top = midpoint(facial_landmarks.part(eye_points[1]), facial_landmarks.part(eye_points[2]))
  center_bottom = midpoint(facial_landmarks.part(eye_points[5]), facial_landmarks.part(eye_points[4]))

  hor_line = cv2.line(frame, left_point, right_point,(0,255,0),2)
  ver_line = cv2.line(frame, center_top, center_bottom,(0,255,0),2)

  ver_line_length = hypot((center_top[0] - center_bottom[0]), (center_top[1] - center_bottom[1]))
  hor_line_length = hypot((left_point[0]-right_point[0]),(left_point[1]- right_point[1]))

  ratio = (hor_line_length / ver_line_length)
  return ratio

# Here is code for Canvas setup
paintWindow = np.zeros((471, 636, 3)) + 255  
cv2.namedWindow('Paint', cv2.WINDOW_AUTOSIZE)
# The colours which will be used as ink for
# the drawing purpose
colors = [(255, 0, 0), (0, 255, 0),
          (0, 0, 255), (0, 255, 255)]
blink_counter = 0
while(True):
      ret, frame = vid.read()
      gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)

      #Add buttons

      frame = cv2.rectangle(frame, (40, 1), (140, 65),
                            (122, 122, 122), -1)
      frame = cv2.rectangle(frame, (160, 1), (255, 65),
                            colors[0], -1)
      frame = cv2.rectangle(frame, (275, 1), (370, 65),
                            colors[1], -1)
      frame = cv2.rectangle(frame, (390, 1), (485, 65),
                            colors[2], -1)
      frame = cv2.rectangle(frame, (505, 1), (600, 65),
                            colors[3], -1)
     
      cv2.putText(frame, "CLEAR ALL", (49, 33),
                  cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                  (255, 255, 255), 2, cv2.LINE_AA)
     
      cv2.putText(frame, "BLUE", (185, 33),
                  cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                  (255, 255, 255), 2, cv2.LINE_AA)
     
      cv2.putText(frame, "GREEN", (298, 33),
                  cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                  (255, 255, 255), 2, cv2.LINE_AA)
     
      cv2.putText(frame, "RED", (420, 33),
                  cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                  (255, 255, 255), 2, cv2.LINE_AA)
     
      cv2.putText(frame, "YELLOW", (520, 33),
               cv2.FONT_HERSHEY_SIMPLEX, 0.5,
                  (150, 150, 150), 2, cv2.LINE_AA)
    
      faces = detector(gray)
      for face in faces:
        #x,y = face.left(), face.top()
        #x1,y1 = face.right(),face.left()
        #cv2.rectangle(frame,(x,y),(x1,y1),(0,255,0),2)


        landmarks = predictor(gray, face)
        
        left_eye_ratio = get_blinking_ratio([36,37,38,39,40,41],landmarks)
        right_eye_ratio = get_blinking_ratio([42,43,44,45,46,47],landmarks)
        blinking_ratio = (left_eye_ratio+right_eye_ratio)/2
        start = time.time()
        if blinking_ratio > 6.5:
          time.sleep(0.33)
          blink_counter += 1
          print (blink_counter)
          if(blink_counter==5):
            end = time.time()
            if(end - start <= 10.0):
              print("hey you look tired, maybe consider some rest")
            blink_counter = 0
          cv2.putText(frame,"BLINKING", (50,150) , font, 7, (255,0,0))
          





      cv2.imshow("Frame", frame)

      key = cv2.waitKey(1)
      if key == 27:
        break
vid.release()
cv2.destroyAllWindows()
